namespace Permutations
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    public class Startup
    {
        private static List<int[]> permutations = new List<int[]>();

        public static void Main()
        {
            var n = 4;
            int[] numbers = new int[n];

            for (int i = 0; i < numbers.Length; i++)
            {
                numbers[i] = i + 1;
            }

            GeneratePermutations(0, numbers);
            PrintPermutation(permutations);
        }

        private static void GeneratePermutations(int startIndex, int[] arrayOfNumers)
        {
            var n = arrayOfNumers.Length;
            if (startIndex >= n)
            {
                // Clone before saving to the list, since array is a reference type (otherwise the list will contain equal arrays)
                int[] clone = (int[])arrayOfNumers.Clone();
                permutations.Add(clone);
            }

            // Permutations are generated by swaping elements in the array
            for (int i = startIndex; i < n; i++)
            {
                Swap(startIndex, i, arrayOfNumers);
                GeneratePermutations(startIndex + 1, arrayOfNumers);
                Swap(startIndex, i, arrayOfNumers);
            }
        }

        private static void Swap(int firstIndex, int secondIndex, int[] arr)
        {
            var x = arr[firstIndex];
            arr[firstIndex] = arr[secondIndex];
            arr[secondIndex] = x;
        }

        private static void PrintPermutation(List<int[]> input)
        {
            Console.WriteLine("Number of permutations: {0}", input.Count);

            var sb = new StringBuilder();
            foreach (var p in input)
            {
                sb.AppendLine(string.Join(", ", p));
            }

            Console.WriteLine(sb.ToString());
        }
    }
}
